@startuml
title Class Diagram

package UserInterface {
	class Client
	abstract class State
	class Game
	class Menu
}

package Container {
	class Map
	class Cave
	class EntityHandler
	class Room
	class Inventory
}


package Utility {
	class Twitter
	class MasterSpawner
	class InputManager
	class CollisionHandler
	class TwitterAnalyser
	class Identifier
}

package Gameplay {
	class Enemy
	class Player
	class Item
	class Structure
	class Floor
	class Mob
	class NonMovable
	class Entity
}




class Client {
	 -states : Stack<State>
	 -running : bool
	 
	 +changeState(state : State) : void
	 +pushState(state : State) : void
	 +popState(state : State) : void
	 +handleEvents() : void
	 +update(dt : float) : void
	 +draw() : void
}

abstract class State {
	+init() = 0 : void
	+handleEvents( cl : Client*) = 0 : void
	+update(cl : Client*) = 0 : void
	+draw() = 0 : void
}


class Game {
	+init() : void
	+handleEvents(cl : Client*) : void
	+update(cl : Client*) : void
	+draw() : void
}

class Menu {
	+init() : void
	+handleEvents(cl : Client*) : void
	+update(cl : Client*) : void
	+draw() : void
}

class Map {
	-caves : ArrayList<Cave>
	+generateCave(URL : String) : void
}

class Cave {
	-rooms : Rooms[][]
	-URL : String

	+createCave(URL : String) : void
	+generateCave() : void
}

class Twitter {
	+getFeed(URL : String) : String
}

class Room {
	+generateRoom() : void
}

class TwitterAnalyser {
	-nrOfKeywords : Integer

	-nrOfKeywords(tweet : String ) : Integer
	+getInRoom(tweet : String, inRoom : Identifier*) : Integer
}

class Identifier {
	+createInRoom(typeID : String) : void
}

class EntityHandler {
	-size : Integer
}

class CollisionHandler {
	isCol(c1 : Vector2f, c2 : Vector2f) : boolean
}

class MasterSpawner {
	+create() : void
}

class InputManager {

}

abstract class Entity {
	-coord : Vector2f
	-texture : Texture
	-health : Integer
	+setCoordinates(coord : Vector2f) : void
	+getCoordinates() : Vector2f

	+update(dt : float) : void
	+getTexture() : Texture
	+setTexture(texture : Texture) : void

	+getHealth() : Integer
	+setHealth(health : Integer) : void
	+create() : void


}

abstract class Mob {
+attack() : Vector2f
+move() : 
+getStats() : Stats
+setPos(coordinate : Vector2f) : void
+interact() : Vector2f
+isDead() : boolean
}

class Player {
+setXP(xp : long) : void
+create() : void
+update(dt : float) : void
}


class Enemy {
+create() : void
+update(dt : float, player : Player) : void

}

class Inventory {

}

class Item {
+create() : void
+update(dt : float) : void
}

class NonMovable {

}

class Floor {
+create() : void
+update(dt : float) : void
}

class Structure {
+create() : void
+update(dt : float) : void
}

Client -- State

State <|-- Game
State <|-- Menu

Game -- Map

Map -- Cave

Cave -- Twitter
Cave -- Room

Room -- TwitterAnalyser
Room -- EntityHandler


Identifier -- TwitterAnalyser
Identifier -- Room 

EntityHandler -- CollisionHandler
EntityHandler -- MasterSpawner
EntityHandler -- InputManager
EntityHandler -- Player
EntityHandler -- Enemy
EntityHandler -- Item
EntityHandler -- Floor
EntityHandler -- Structure

Entity <|--- Mob
Entity <|--- Item
Entity <|--- NonMovable

Player -- Inventory
Inventory -- Item

Mob <|--- Player
Mob <|--- Enemy

NonMovable <|--- Floor
NonMovable <|--- Structure


@enduml
