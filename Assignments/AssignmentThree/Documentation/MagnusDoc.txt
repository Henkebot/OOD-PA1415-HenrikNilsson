[2017-05-04]
I've decided that we need a class wich is called Application. This class is where the game loop is.
Created Application class : public sf::Drawable
	- Added void run() 			//Here are the game loop
	- Added void update(float dt) 		//This updates the stack.peek()
	- Added sf::RenderWindow window		//This is the window the game will be running on
I removed the game loop from the source.cpp
Created IStack.h
	- Added push(), pop(), peek(), set() and isEmpty().

Created Stack.h : public :IStack<T>
	I made the IDS with an array.
	- Added copy-constructor and Assignment operator.

Created test_Stack
	Stack.h passes my tests.

Created State.h & Client.h
	- State & Client some what are holding eachothers hands... So I was forced to create these paralell to eachother,
	- There will only be one Client and all States will have a pointer to that Client.
	- The Client will be deleted in the destructor of application, where it will also be created.
	- I've decided to actually put a protected variable to the Client in the State class so that every state can reach it.

In the Client class I've decided to remove the bool "running". This is because we use SFML and we will use window.isOpen() instead.

I get a compiling problem:
	...\state.h(9): error C2061: syntax error: identifier 'Client'
	...\state.h(20): error C2143: syntax error: missing ';' before '*'
	...\state.h(20): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int
	...\state.h(20): error C2238: unexpected token(s) preceding ';'

[2017-05-05]
After a conversation with Chefen I've decided not to use my stack anymore... This is because I feel that it takes to much time to handle
pointers and the possible memory leaks.

I solved the compiling problems by adding a forward declaration in State.h

I've tested to push both Menu and Game down the stack with states and it works. I get memory leaks tho when I quit and I belive it's 
because the Stack don't handle the memory so good... I will once again write my own stack :)

After some testing I've decided to add my own stack again, this is because the pop() function in the "standard" stack don't give a return.
This is needed so I can clear the memory.

[2017-05-08]
I've now added my own stack again and also fixed all the memory leaks that was created. I forgot to add the pop() fuction in the 
GameStateManager-destructor. Everything is now working fine and the next thing I'll do is to create a menu. To do this I need an
InputManager. I will talk to the group later today to see what they think of my solution.s

I've created an Inputmanager class that can manage all sorts of inputs. I did this because I didn't find it as "Hantverk" to put every single button that can be pressed as a member variable.
This InputManager is overpowerd and this ONE function can chech if any key is pressed!
You check if (for example) Return is pressed do following: if (InputManager::keyPressed(sf::Keyboard::Return)) {do studff;}